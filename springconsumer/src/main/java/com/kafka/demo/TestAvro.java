/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.kafka.demo;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestAvro\",\"namespace\":\"com.kafka.demo\",\"fields\":[{\"name\":\"identifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"user\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"version\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String identifier;
  @Deprecated public java.lang.String user;

  /**
   * Default constructor.
   */
  public TestAvro() {}

  /**
   * All-args constructor.
   */
  public TestAvro(java.lang.String identifier, java.lang.String user) {
    this.identifier = identifier;
    this.user = user;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return identifier;
    case 1: return user;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: identifier = (java.lang.String)value$; break;
    case 1: user = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'identifier' field.
   */
  public java.lang.String getIdentifier() {
    return identifier;
  }

  /**
   * Sets the value of the 'identifier' field.
   * @param value the value to set.
   */
  public void setIdentifier(java.lang.String value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'user' field.
   */
  public java.lang.String getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.String value) {
    this.user = value;
  }

  /** Creates a new TestAvro RecordBuilder */
  public static com.kafka.demo.TestAvro.Builder newBuilder() {
    return new com.kafka.demo.TestAvro.Builder();
  }
  
  /** Creates a new TestAvro RecordBuilder by copying an existing Builder */
  public static com.kafka.demo.TestAvro.Builder newBuilder(com.kafka.demo.TestAvro.Builder other) {
    return new com.kafka.demo.TestAvro.Builder(other);
  }
  
  /** Creates a new TestAvro RecordBuilder by copying an existing TestAvro instance */
  public static com.kafka.demo.TestAvro.Builder newBuilder(com.kafka.demo.TestAvro other) {
    return new com.kafka.demo.TestAvro.Builder(other);
  }
  
  /**
   * RecordBuilder for TestAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestAvro>
    implements org.apache.avro.data.RecordBuilder<TestAvro> {

    private java.lang.String identifier;
    private java.lang.String user;

    /** Creates a new Builder */
    private Builder() {
      super(com.kafka.demo.TestAvro.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.kafka.demo.TestAvro.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing TestAvro instance */
    private Builder(com.kafka.demo.TestAvro other) {
            super(com.kafka.demo.TestAvro.SCHEMA$);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user)) {
        this.user = data().deepCopy(fields()[1].schema(), other.user);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'identifier' field */
    public java.lang.String getIdentifier() {
      return identifier;
    }
    
    /** Sets the value of the 'identifier' field */
    public com.kafka.demo.TestAvro.Builder setIdentifier(java.lang.String value) {
      validate(fields()[0], value);
      this.identifier = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'identifier' field has been set */
    public boolean hasIdentifier() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'identifier' field */
    public com.kafka.demo.TestAvro.Builder clearIdentifier() {
      identifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'user' field */
    public java.lang.String getUser() {
      return user;
    }
    
    /** Sets the value of the 'user' field */
    public com.kafka.demo.TestAvro.Builder setUser(java.lang.String value) {
      validate(fields()[1], value);
      this.user = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'user' field has been set */
    public boolean hasUser() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'user' field */
    public com.kafka.demo.TestAvro.Builder clearUser() {
      user = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TestAvro build() {
      try {
        TestAvro record = new TestAvro();
        record.identifier = fieldSetFlags()[0] ? this.identifier : (java.lang.String) defaultValue(fields()[0]);
        record.user = fieldSetFlags()[1] ? this.user : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
